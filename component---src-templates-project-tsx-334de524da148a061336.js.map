{"version":3,"sources":["webpack:///./src/templates/project.tsx"],"names":["Post","colors","ui","terminal","location","history","ProjectTemplate","data","markdownRemark","fields","excerpt","frontmatter","title","technologies","links","description","featuredImgFluid","featuredImage","childImageSharp","fluid","socialImgFixed","socialImage","fixed","src","thumbnail","author","site","siteMetadata","useEffect","html","length","quotableToolbar","Quotable","selector","isActive","blockquotes","textSelection","url","href","twitter","via","related","hashtags","activate","deactivate","meta","pathname","slug","type","image","text","fallback","map","tech","replace","toLowerCase","key","className","dangerouslySetInnerHTML","__html","id","link","color","target","encodeURI","email","query"],"mappings":"mUAiEMA,EAAO,mBAAH,oBAAG,CAAH,6GAMGC,IAAOC,GAAGC,SANb,iBAUFC,EAAaC,gBAAbD,SA6FOE,UA3FyC,SAAC,GAAa,YAAXC,EAAW,EAAXA,KAAW,EAC3BA,EAAKC,eAAtCC,EAD4D,EAC5DA,OAAQC,EADoD,EACpDA,QAASC,EAD2C,EAC3CA,YACjBC,EAA4CD,EAA5CC,MAAOC,EAAqCF,EAArCE,aAAcC,EAAuBH,EAAvBG,MAAOC,EAAgBJ,EAAhBI,YAC9BC,EAAgB,UAAGL,EAAYM,qBAAf,aAAG,EAA2BC,gBAAgBC,MAC9DC,EAAc,UAAGT,EAAYU,mBAAf,aAAG,EAAyBH,gBAAgBI,MAAMC,IAChEC,EAAS,UAAGb,EAAYa,iBAAf,aAAG,EAAuBN,gBAAgBI,MACjDG,EAAWlB,EAAKmB,KAAKC,aAArBF,OACRG,qBAAU,WAAM,MACd,IAAI,UAAArB,EAAKC,eAAeqB,YAApB,eAA0BC,QAAS,EAAG,CACxC,IAAMC,EAAkB,IAAIC,IAAS,CACnCC,SAAU,aACVC,SAAU,CACRC,aAAa,EACbC,eAAe,GAEjBC,IAAKjC,EAASkC,KACdC,QAAS,CACPC,IAAK,cACLC,QAAS,cACTC,SAAU,CAAC,aAAc,eAI7B,OADAX,EAAgBY,WACT,WACLZ,EAAgBa,iBAGnB,IACH,IAAMC,EAAO,OAAH,QACRC,SAAUrC,EAAOsC,KACjBhC,YAAaL,EACbsC,KAAM,UACNpC,SACIQ,EAAiB,CAAE6B,MAAO7B,GAAmB,IAEnD,OACE,YAAC,IAAgByB,EACf,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAOK,KAAMtC,EAAOuC,SAAS,OAC7B,8BAAapC,GACZC,EAAmB,YAAC,IAAD,CAAKG,MAAOH,IAAuBQ,GAAa,YAAC,IAAD,CAAKF,MAAOE,IAChF,uBACA,qBACGX,EAAauC,KAAI,SAAAC,GAChB,IAAMN,EAAOM,EAAKC,QAAQ,eAAgB,IAAIC,cAC9C,OACE,oBAAMC,IAAKH,GACT,oBAAMI,UAAS,SAAWV,GAASM,GAAa,SAKxD,wBACC,UAAA9C,EAAKC,eAAeqB,YAApB,eAA0BC,QAAS,EAClC,8BAEE,YAAC9B,EAAD,CAAMyD,UAAU,YAAYC,wBAAyB,CAAEC,OAAQpD,EAAKC,eAAeqB,QACnF,wBAEA,KACJ,kBAAI+B,GAAG,kBAAP,kBACA,qBACG9C,EAAMsC,KAAI,SAAAS,GAAQ,IACTxB,EAA2BwB,EAA3BxB,IAAKzB,EAAsBiD,EAAtBjD,MADI,EACkBiD,EAAfC,aADH,MACW,GADX,EAEjB,OACE,oBAAMN,IAAKnB,GACT,iBAAGoB,UAAS,SAAWK,EAAMP,cAAiBjB,KAAMD,EAAK0B,OAAO,UAC7DnD,GACE,SAKb,uBACA,wEACmD,IACjD,iBACE0B,KAAM0B,UAAU,UACJvC,EAAOwC,MADJ,uBACgCrD,EADhC,qDAC0FR,EAASkC,KADnG,kCADjB,uCAKuCb,EAAOwC,OAPhD,SAkBH,IAAMC,EAAQ","file":"component---src-templates-project-tsx-334de524da148a061336.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { graphql } from 'gatsby'\nimport { globalHistory as history } from '@reach/router'\nimport Quotable from 'quotable-toolbar'\nimport Img from 'gatsby-image'\n\nimport Page from '../components/Page'\nimport Terminal from '../components/Terminal'\nimport IndexLayout from '../layouts'\nimport ASCII from 'react-rainbow-ascii'\nimport styled from '@emotion/styled'\nimport { colors } from '../styles/variables'\nimport { FluidObject, FixedObject } from 'gatsby-image'\n\ninterface ProjectTemplateProps {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        author: {\n          name: string\n          email: string\n        }\n      }\n    }\n    markdownRemark: {\n      html: string\n      excerpt: string\n      fields: {\n        slug: string\n      }\n      frontmatter: {\n        title: string\n        description: string\n        date: string\n        category: string\n        technologies: string[]\n        featuredImage?: {\n          childImageSharp: {\n            fluid: FluidObject\n          }\n        }\n        socialImage?: {\n          childImageSharp: {\n            fixed: FixedObject\n          }\n        }\n        thumbnail?: {\n          childImageSharp: {\n            fixed: FixedObject\n          }\n        }\n        links: [\n          {\n            title: string\n            url: string\n            color?: string\n          }\n        ]\n      }\n    }\n  }\n}\n\nconst Post = styled.div`\n  position: relative;\n  .gatsby-resp-image-figcaption {\n    text-align: center;\n  }\n  #quotable-toolbar .quotable-link {\n    color: ${colors.ui.terminal} !important;\n  }\n`\n\nconst { location } = history\n\nconst ProjectTemplate: React.FC<ProjectTemplateProps> = ({ data }) => {\n  const { fields, excerpt, frontmatter } = data.markdownRemark\n  const { title, technologies, links, description } = frontmatter\n  const featuredImgFluid = frontmatter.featuredImage?.childImageSharp.fluid\n  const socialImgFixed = frontmatter.socialImage?.childImageSharp.fixed.src\n  const thumbnail = frontmatter.thumbnail?.childImageSharp.fixed\n  const { author } = data.site.siteMetadata\n  useEffect(() => {\n    if (data.markdownRemark.html?.length > 0) {\n      const quotableToolbar = new Quotable({\n        selector: `.blog-post`,\n        isActive: {\n          blockquotes: true,\n          textSelection: true\n        },\n        url: location.href,\n        twitter: {\n          via: 'JoFromAkron',\n          related: 'JoFromAkron',\n          hashtags: ['OpenSource', 'Quotable']\n        }\n      })\n      quotableToolbar.activate()\n      return () => {\n        quotableToolbar.deactivate()\n      }\n    }\n  }, [])\n  const meta = {\n    pathname: fields.slug,\n    description: excerpt,\n    type: 'article',\n    title,\n    ...(socialImgFixed ? { image: socialImgFixed } : {})\n  }\n  return (\n    <IndexLayout {...meta}>\n      <Page>\n        <Terminal>\n          <ASCII text={title} fallback=\"h1\" />\n          <blockquote>{description}</blockquote>\n          {featuredImgFluid ? <Img fluid={featuredImgFluid} /> : thumbnail && <Img fixed={thumbnail} />}\n          <br />\n          <p>\n            {technologies.map(tech => {\n              const slug = tech.replace(/[^a-zA-Z\\d]/g, '').toLowerCase()\n              return (\n                <span key={tech}>\n                  <span className={`badge ${slug}`}>{tech}</span>{' '}\n                </span>\n              )\n            })}\n          </p>\n          <hr />\n          {data.markdownRemark.html?.length > 0 ? (\n            <>\n              {/* eslint-disable-next-line react/no-danger */}\n              <Post className=\"blog-post\" dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\n              <hr />\n            </>\n          ) : null}\n          <h2 id=\"#project-links\">Project links:</h2>\n          <p>\n            {links.map(link => {\n              const { url, title, color = '' } = link\n              return (\n                <span key={url}>\n                  <a className={`badge ${color.toLowerCase()}`} href={url} target=\"_blank\">\n                    {title}\n                  </a>{' '}\n                </span>\n              )\n            })}\n          </p>\n          <hr />\n          <p>\n            Thank you for reading about this project. Please{' '}\n            <a\n              href={encodeURI(\n                `mailto:${author.email}?subject=Your post: ${title}&body=I am writing this email about your project: ${location.href}\\n\\nHere are my comments:\\n\\n`\n              )}\n            >\n              send an email with your comments to {author.email}\n            </a>\n            .\n          </p>\n        </Terminal>\n      </Page>\n    </IndexLayout>\n  )\n}\nexport default ProjectTemplate\n\nexport const query = graphql`\n  query ProjectTemplateQuery($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n        author {\n          name\n          email\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        description\n        featuredImage {\n          childImageSharp {\n            fluid(maxWidth: 1544) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        socialImage {\n          childImageSharp {\n            fixed(width: 1200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        thumbnail {\n          childImageSharp {\n            fixed(width: 235) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        date(formatString: \"MMMM Do, YYYY\")\n        category\n        technologies\n        links {\n          title\n          url\n          color\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}