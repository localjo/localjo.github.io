{"version":3,"sources":["webpack:///./src/templates/project.tsx"],"names":["Post","colors","ui","terminal","location","history","ProjectTemplate","data","markdownRemark","frontmatter","title","technologies","links","description","featuredImgFluid","featuredImage","childImageSharp","fluid","thumbnail","fixed","author","site","siteMetadata","useEffect","html","length","quotableToolbar","Quotable","selector","isActive","blockquotes","textSelection","url","href","twitter","via","related","hashtags","activate","deactivate","meta","src","image","text","fallback","map","tech","slug","replace","toLowerCase","key","className","dangerouslySetInnerHTML","__html","id","link","color","target","encodeURI","email","query"],"mappings":"mUAyDMA,EAAO,mBAAH,oBAAG,CAAH,6GAMGC,IAAOC,GAAGC,SANb,iBAUFC,EAAaC,gBAAbD,SA0FOE,UAxFyC,SAAC,GAAa,cAAXC,EAAW,EAAXA,KAAW,EAChBA,EAAKC,eAAeC,YAAhEC,EAD4D,EAC5DA,MAAOC,EADqD,EACrDA,aAAcC,EADuC,EACvCA,MAAOC,EADgC,EAChCA,YAC9BC,EAAgB,UAAGP,EAAKC,eAAeC,YAAYM,qBAAnC,aAAG,EAA+CC,gBAAgBC,MAClFC,EAAS,UAAGX,EAAKC,eAAeC,YAAYS,iBAAnC,aAAG,EAA2CF,gBAAgBG,MACrEC,EAAWb,EAAKc,KAAKC,aAArBF,OACRG,qBAAU,WAAM,MACd,IAAI,UAAAhB,EAAKC,eAAegB,YAApB,eAA0BC,QAAS,EAAG,CACxC,IAAMC,EAAkB,IAAIC,IAAS,CACnCC,SAAU,aACVC,SAAU,CACRC,aAAa,EACbC,eAAe,GAEjBC,IAAK5B,EAAS6B,KACdC,QAAS,CACPC,IAAK,cACLC,QAAS,cACTC,SAAU,CAAC,aAAc,eAI7B,OADAX,EAAgBY,WACT,WACLZ,EAAgBa,iBAGnB,IACH,IAAMC,EAAO,OAAH,QACR9B,UACI,UAAAH,EAAKC,eAAeC,YAAYM,qBAAhC,eAA+CC,gBAAgBC,MAAMwB,KACrE,CAAEC,MAAK,UAAEnC,EAAKC,eAAeC,YAAYM,qBAAlC,aAAE,EAA+CC,gBAAgBC,MAAMwB,KAC9E,IAEN,OACE,YAAC,IAAgBD,EACf,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAOG,KAAMjC,EAAOkC,SAAS,OAC7B,8BAAa/B,GACZC,EAAmB,YAAC,IAAD,CAAKG,MAAOH,IAAuBI,GAAa,YAAC,IAAD,CAAKC,MAAOD,IAChF,uBACA,qBACGP,EAAakC,KAAI,SAAAC,GAChB,IAAMC,EAAOD,EAAKE,QAAQ,eAAgB,IAAIC,cAC9C,OACE,oBAAMC,IAAKJ,GACT,oBAAMK,UAAS,SAAWJ,GAASD,GAAa,SAKxD,wBACC,UAAAvC,EAAKC,eAAegB,YAApB,eAA0BC,QAAS,EAClC,8BAEE,YAACzB,EAAD,CAAMmD,UAAU,YAAYC,wBAAyB,CAAEC,OAAQ9C,EAAKC,eAAegB,QACnF,wBAEA,KACJ,kBAAI8B,GAAG,kBAAP,kBACA,qBACG1C,EAAMiC,KAAI,SAAAU,GAAQ,IACTvB,EAA2BuB,EAA3BvB,IAAKtB,EAAsB6C,EAAtB7C,MADI,EACkB6C,EAAfC,aADH,MACW,GADX,EAEjB,OACE,oBAAMN,IAAKlB,GACT,iBAAGmB,UAAS,SAAWK,EAAMP,cAAiBhB,KAAMD,EAAKyB,OAAO,UAC7D/C,GACE,SAKb,uBACA,wEACmD,IACjD,iBACEuB,KAAMyB,UAAU,UACJtC,EAAOuC,MADJ,uBACgCjD,EADhC,qDAC0FN,EAAS6B,KADnG,kCADjB,uCAKuCb,EAAOuC,OAPhD,SAkBH,IAAMC,EAAQ","file":"component---src-templates-project-tsx-e3e2c5cf25e4c43bacc8.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { graphql } from 'gatsby'\nimport { globalHistory as history } from '@reach/router'\nimport Quotable from 'quotable-toolbar'\nimport Img from 'gatsby-image'\n\nimport Page from '../components/Page'\nimport Terminal from '../components/Terminal'\nimport IndexLayout from '../layouts'\nimport ASCII from 'react-rainbow-ascii'\nimport styled from '@emotion/styled'\nimport { colors } from '../styles/variables'\nimport { FluidObject, FixedObject } from 'gatsby-image'\n\ninterface ProjectTemplateProps {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        author: {\n          name: string\n          email: string\n        }\n      }\n    }\n    markdownRemark: {\n      html: string\n      excerpt: string\n      frontmatter: {\n        title: string\n        description: string\n        date: string\n        category: string\n        technologies: string[]\n        featuredImage?: {\n          childImageSharp: {\n            fluid: FluidObject\n          }\n        }\n        thumbnail?: {\n          childImageSharp: {\n            fixed: FixedObject\n          }\n        }\n        links: [\n          {\n            title: string\n            url: string\n            color?: string\n          }\n        ]\n      }\n    }\n  }\n}\n\nconst Post = styled.div`\n  position: relative;\n  .gatsby-resp-image-figcaption {\n    text-align: center;\n  }\n  #quotable-toolbar .quotable-link {\n    color: ${colors.ui.terminal} !important;\n  }\n`\n\nconst { location } = history\n\nconst ProjectTemplate: React.FC<ProjectTemplateProps> = ({ data }) => {\n  const { title, technologies, links, description } = data.markdownRemark.frontmatter\n  const featuredImgFluid = data.markdownRemark.frontmatter.featuredImage?.childImageSharp.fluid\n  const thumbnail = data.markdownRemark.frontmatter.thumbnail?.childImageSharp.fixed\n  const { author } = data.site.siteMetadata\n  useEffect(() => {\n    if (data.markdownRemark.html?.length > 0) {\n      const quotableToolbar = new Quotable({\n        selector: `.blog-post`,\n        isActive: {\n          blockquotes: true,\n          textSelection: true\n        },\n        url: location.href,\n        twitter: {\n          via: 'JoFromAkron',\n          related: 'JoFromAkron',\n          hashtags: ['OpenSource', 'Quotable']\n        }\n      })\n      quotableToolbar.activate()\n      return () => {\n        quotableToolbar.deactivate()\n      }\n    }\n  }, [])\n  const meta = {\n    title,\n    ...(data.markdownRemark.frontmatter.featuredImage?.childImageSharp.fluid.src\n      ? { image: data.markdownRemark.frontmatter.featuredImage?.childImageSharp.fluid.src }\n      : {})\n  }\n  return (\n    <IndexLayout {...meta}>\n      <Page>\n        <Terminal>\n          <ASCII text={title} fallback=\"h1\" />\n          <blockquote>{description}</blockquote>\n          {featuredImgFluid ? <Img fluid={featuredImgFluid} /> : thumbnail && <Img fixed={thumbnail} />}\n          <br />\n          <p>\n            {technologies.map(tech => {\n              const slug = tech.replace(/[^a-zA-Z\\d]/g, '').toLowerCase()\n              return (\n                <span key={tech}>\n                  <span className={`badge ${slug}`}>{tech}</span>{' '}\n                </span>\n              )\n            })}\n          </p>\n          <hr />\n          {data.markdownRemark.html?.length > 0 ? (\n            <>\n              {/* eslint-disable-next-line react/no-danger */}\n              <Post className=\"blog-post\" dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\n              <hr />\n            </>\n          ) : null}\n          <h2 id=\"#project-links\">Project links:</h2>\n          <p>\n            {links.map(link => {\n              const { url, title, color = '' } = link\n              return (\n                <span key={url}>\n                  <a className={`badge ${color.toLowerCase()}`} href={url} target=\"_blank\">\n                    {title}\n                  </a>{' '}\n                </span>\n              )\n            })}\n          </p>\n          <hr />\n          <p>\n            Thank you for reading about this project. Please{' '}\n            <a\n              href={encodeURI(\n                `mailto:${author.email}?subject=Your post: ${title}&body=I am writing this email about your project: ${location.href}\\n\\nHere are my comments:\\n\\n`\n              )}\n            >\n              send an email with your comments to {author.email}\n            </a>\n            .\n          </p>\n        </Terminal>\n      </Page>\n    </IndexLayout>\n  )\n}\nexport default ProjectTemplate\n\nexport const query = graphql`\n  query ProjectTemplateQuery($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n        author {\n          name\n          email\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt\n      frontmatter {\n        title\n        description\n        featuredImage {\n          childImageSharp {\n            fluid(maxWidth: 1140) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        thumbnail {\n          childImageSharp {\n            fixed(width: 235) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        date(formatString: \"MMMM Do, YYYY\")\n        category\n        technologies\n        links {\n          title\n          url\n          color\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}