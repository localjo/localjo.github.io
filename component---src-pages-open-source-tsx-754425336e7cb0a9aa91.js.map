{"version":3,"sources":["webpack:///./src/pages/open-source.tsx"],"names":["OpenSourceIndex","data","title","text","fallback","className","allMarkdownRemark","nodes","map","project","fields","frontmatter","excerpt","technologies","links","thumbnail","description","key","slug","fixed","childImageSharp","link","url","color","toLowerCase","href","target","length","to","tech","replace","query"],"mappings":"uQAuGeA,UA3DyC,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACzD,OACE,YAAC,IAAD,CAAaC,MAAM,eACjB,YAAC,IAAD,KACE,YAAC,IAAD,CAAUA,MAAM,gBACd,YAAC,IAAD,CAAOC,KAAK,cAAcC,SAAS,OACnC,uBACA,uMAIA,mBAAKC,UAAU,aACZJ,EAAKK,kBAAkBC,MAAMC,KAAI,SAAAC,GAAW,IACnCC,EAAiCD,EAAjCC,OAAQC,EAAyBF,EAAzBE,YAAaC,EAAYH,EAAZG,QACrBV,EAAuDS,EAAvDT,MAAOW,EAAgDF,EAAhDE,aAAcC,EAAkCH,EAAlCG,MAAOC,EAA2BJ,EAA3BI,UAAWC,EAAgBL,EAAhBK,YAC/C,OACE,mBAAKC,IAAKP,EAAOQ,KAAMb,UAAU,gBAC/B,sBAAKH,GACL,qBAAIa,GAAa,YAAC,IAAD,CAAKI,MAAOJ,EAAUK,gBAAgBD,SACvD,sBACGL,EAAMN,KAAI,SAAAa,GAAQ,IACTC,EAA2BD,EAA3BC,IAAKpB,EAAsBmB,EAAtBnB,MADI,EACkBmB,EAAfE,aADH,MACW,GADX,EAEjB,OACE,kBAAIN,IAAKK,GACP,iBAAGjB,UAAS,SAAWkB,EAAMC,cAAiBC,KAAMH,EAAKI,OAAO,UAC7DxB,GACE,SAIVU,aAAA,EAAAA,EAASe,QAAS,GACjB,sBACE,YAAC,OAAD,CAAMtB,UAAU,QAAQuB,GAAIlB,EAAOQ,MAAnC,aAMN,qBAAIF,GACJ,qBACGH,EAAaL,KAAI,SAAAqB,GAChB,IAAMX,EAAOW,EAAKC,QAAQ,eAAgB,IAAIN,cAC9C,OACE,oBAAMP,IAAKY,GACT,oBAAMxB,UAAS,SAAWa,GAASW,GAAa,kBAiBnE,IAAME,EAAQ","file":"component---src-pages-open-source-tsx-754425336e7cb0a9aa91.js","sourcesContent":["import * as React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Page from '../components/Page'\nimport Terminal from '../components/Terminal'\nimport IndexLayout from '../layouts'\nimport ASCII from 'react-rainbow-ascii'\nimport Img, { FixedObject } from 'gatsby-image'\n\ninterface OpenSourceIndexProps {\n  data: {\n    allMarkdownRemark: {\n      nodes: [\n        {\n          fields: {\n            slug: string\n          }\n          html: string\n          excerpt: string\n          frontmatter: {\n            title: string\n            description: string\n            date: string\n            category: string\n            technologies: string[]\n            thumbnail?: {\n              childImageSharp: {\n                fixed: FixedObject\n              }\n            }\n            links: [\n              {\n                title: string\n                url: string\n                color?: string\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n\nconst OpenSourceIndex: React.FC<OpenSourceIndexProps> = ({ data }) => {\n  return (\n    <IndexLayout title=\"Open Source\">\n      <Page>\n        <Terminal title=\"/open-source\">\n          <ASCII text=\"Open Source\" fallback=\"h1\" />\n          <br />\n          <p>\n            I’m passionate about contributing to the Open Source community and I’m proud to have contributed to some really cool projects,\n            as well as maintaining some projects of my own.\n          </p>\n          <div className=\"tile-list\">\n            {data.allMarkdownRemark.nodes.map(project => {\n              const { fields, frontmatter, excerpt } = project\n              const { title, technologies, links, thumbnail, description } = frontmatter\n              return (\n                <div key={fields.slug} className=\"project tile\">\n                  <h2>{title}</h2>\n                  <p>{thumbnail && <Img fixed={thumbnail.childImageSharp.fixed} />}</p>\n                  <ul>\n                    {links.map(link => {\n                      const { url, title, color = '' } = link\n                      return (\n                        <li key={url}>\n                          <a className={`badge ${color.toLowerCase()}`} href={url} target=\"_blank\">\n                            {title}\n                          </a>{' '}\n                        </li>\n                      )\n                    })}\n                    {excerpt?.length > 0 && (\n                      <li>\n                        <Link className=\"badge\" to={fields.slug}>\n                          Details\n                        </Link>\n                      </li>\n                    )}\n                  </ul>\n                  <p>{description}</p>\n                  <p>\n                    {technologies.map(tech => {\n                      const slug = tech.replace(/[^a-zA-Z\\d]/g, '').toLowerCase()\n                      return (\n                        <span key={tech}>\n                          <span className={`badge ${slug}`}>{tech}</span>{' '}\n                        </span>\n                      )\n                    })}\n                  </p>\n                </div>\n              )\n            })}\n          </div>\n        </Terminal>\n      </Page>\n    </IndexLayout>\n  )\n}\n\nexport default OpenSourceIndex\n\nexport const query = graphql`\n  query OpenSourceProjectsQuery {\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }, filter: { frontmatter: { category: { eq: \"Open Source\" } } }) {\n      nodes {\n        frontmatter {\n          title\n          description\n          featuredImage {\n            childImageSharp {\n              fluid(maxWidth: 1140) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          thumbnail {\n            childImageSharp {\n              fixed(width: 235) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n          technologies\n          links {\n            title\n            url\n            color\n          }\n        }\n        excerpt(format: PLAIN)\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}